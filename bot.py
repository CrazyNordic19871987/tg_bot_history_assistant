import sqlite3
import asyncio
from aiogram import Bot, Dispatcher, types
from aiogram.filters import Command
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton
import wikipediaapi

# –ù–∞—Å—Ç—Ä–æ–π–∫–∏
API_TOKEN = '–í–ê–®_–¢–û–ö–ï–ù'  # –ó–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ —Ç–æ–∫–µ–Ω –æ—Ç BotFather
DATABASE_NAME = 'history_bot.db'

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞ –∏ –¥–∏—Å–ø–µ—Ç—á–µ—Ä–∞
bot = Bot(token=API_TOKEN)
dp = Dispatcher()

# Wikipedia API —Å user-agent
wiki = wikipediaapi.Wikipedia('ru', user_agent="HistoryBot/1.0 (your_email@example.com)")

# –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —Å –∫–æ–º–∞–Ω–¥–∞–º–∏
main_keyboard = ReplyKeyboardMarkup(keyboard=[
    [KeyboardButton(text="–ò—Å—Ç–æ—Ä–∏—è –î—Ä–µ–≤–Ω–µ–≥–æ –º–∏—Ä–∞")],
    [KeyboardButton(text="–ò—Å—Ç–æ—Ä–∏—è –°—Ä–µ–¥–Ω–∏—Ö –≤–µ–∫–æ–≤")],
    [KeyboardButton(text="–ò—Å—Ç–æ—Ä–∏—è –ù–æ–≤–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏")],
    [KeyboardButton(text="–í–∏–∫—Ç–æ—Ä–∏–Ω–∞"), KeyboardButton(text="–¢–∞–±–ª–∏—Ü–∞ –ª–∏–¥–µ—Ä–æ–≤")]
], resize_keyboard=True)

# –§—É–Ω–∫—Ü–∏–∏ —Ä–∞–±–æ—Ç—ã —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö
def get_or_create_user(user_id, username):
    conn = sqlite3.connect(DATABASE_NAME)
    cursor = conn.cursor()
    
    cursor.execute("SELECT score FROM users WHERE user_id = ?", (user_id,))
    result = cursor.fetchone()
    
    if result is None:
        cursor.execute("INSERT INTO users (user_id, username, score) VALUES (?, ?, ?)", (user_id, username, 0))
        conn.commit()
        score = 0
    else:
        score = result[0]
    
    conn.close()
    return score

def update_score(user_id, points):
    conn = sqlite3.connect(DATABASE_NAME)
    cursor = conn.cursor()
    
    cursor.execute("UPDATE users SET score = score + ? WHERE user_id = ?", (points, user_id))
    conn.commit()
    conn.close()

def get_leaderboard():
    conn = sqlite3.connect(DATABASE_NAME)
    cursor = conn.cursor()
    
    cursor.execute("SELECT username, score FROM users ORDER BY score DESC LIMIT 5")
    results = cursor.fetchall()
    
    conn.close()
    return results

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start
@dp.message(Command("start"))
async def send_welcome(message: types.Message):
    user_id = message.from_user.id
    username = message.from_user.username or "–ê–Ω–æ–Ω–∏–º"
    get_or_create_user(user_id, username)
    
    await message.answer("–ü—Ä–∏–≤–µ—Ç! –í—ã–±–µ—Ä–∏ –ø–µ—Ä–∏–æ–¥ –∏—Å—Ç–æ—Ä–∏–∏ –∏–ª–∏ –Ω–∞—á–Ω–∏ –≤–∏–∫—Ç–æ—Ä–∏–Ω—É.", reply_markup=main_keyboard)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
@dp.message()
async def handle_message(message: types.Message):
    user_id = message.from_user.id
    username = message.from_user.username or "–ê–Ω–æ–Ω–∏–º"

    if message.text.startswith("–ò—Å—Ç–æ—Ä–∏—è"):
        period = message.text.replace("–ò—Å—Ç–æ—Ä–∏—è ", "")
        events = {
            "–î—Ä–µ–≤–Ω–µ–≥–æ –º–∏—Ä–∞": "–ü–æ—è–≤–ª–µ–Ω–∏–µ –ø–∏—Å—å–º–µ–Ω–Ω–æ—Å—Ç–∏ –≤ –®—É–º–µ—Ä–µ (3200 –≥–æ–¥ –¥–æ –Ω.—ç.)",
            "–°—Ä–µ–¥–Ω–∏—Ö –≤–µ–∫–æ–≤": "–ü–æ–¥–ø–∏—Å–∞–Ω–∏–µ –í–µ–ª–∏–∫–æ–π —Ö–∞—Ä—Ç–∏–∏ –≤–æ–ª—å–Ω–æ—Å—Ç–µ–π (1215 –≥–æ–¥, –ê–Ω–≥–ª–∏—è)",
            "–ù–æ–≤–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏": "–ù–∞—á–∞–ª–æ –ø—Ä–æ–º—ã—à–ª–µ–Ω–Ω–æ–π —Ä–µ–≤–æ–ª—é—Ü–∏–∏ (XVIII –≤–µ–∫, –í–µ–ª–∏–∫–æ–±—Ä–∏—Ç–∞–Ω–∏—è)"
        }
        response = events.get(period, "–ù–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –ø–æ —ç—Ç–æ–º—É –ø–µ—Ä–∏–æ–¥—É.")
        await message.answer(response)

    elif message.text == "–í–∏–∫—Ç–æ—Ä–∏–Ω–∞":
        question = "–ö–æ–≥–¥–∞ –Ω–∞—á–∞–ª–∞—Å—å –ü–µ—Ä–≤–∞—è –º–∏—Ä–æ–≤–∞—è –≤–æ–π–Ω–∞?"
        options = ["1914", "1917", "1939"]
        
        quiz_keyboard = ReplyKeyboardMarkup(
            keyboard=[[KeyboardButton(text=opt)] for opt in options], resize_keyboard=True
        )
        await message.answer(question, reply_markup=quiz_keyboard)

    elif message.text in ["1914", "1917", "1939"]:  # –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ—Ç–≤–µ—Ç—ã –Ω–∞ –≤–∏–∫—Ç–æ—Ä–∏–Ω—É
        if message.text == "1914":
            update_score(user_id, 10)
            await message.answer("–ü—Ä–∞–≤–∏–ª—å–Ω–æ! üéâ –¢—ã –∑–∞—Ä–∞–±–æ—Ç–∞–ª 10 –±–∞–ª–ª–æ–≤.")
        else:
            await message.answer("–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ. –ü–æ–ø—Ä–æ–±—É–π –µ—â—ë —Ä–∞–∑!")

    elif message.text == "–¢–∞–±–ª–∏—Ü–∞ –ª–∏–¥–µ—Ä–æ–≤":
        leaders = get_leaderboard()
        if leaders:
            leaderboard_text = "üèÜ –¢–û–ü-5 –∏–≥—Ä–æ–∫–æ–≤:\n"
            for i, (username, score) in enumerate(leaders, start=1):
                leaderboard_text += f"{i}. {username}: {score} –±–∞–ª–ª–æ–≤\n"
        else:
            leaderboard_text = "–ü–æ–∫–∞ –Ω–µ—Ç —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –≤ —Ç–∞–±–ª–∏—Ü–µ –ª–∏–¥–µ—Ä–æ–≤."
        
        await message.answer(leaderboard_text)

    else:
        await message.answer("–Ø –Ω–µ –ø–æ–Ω–∏–º–∞—é —ç—Ç–æ—Ç –∑–∞–ø—Ä–æ—Å. –í—ã–±–µ—Ä–∏ –∫–æ–º–∞–Ω–¥—É –∏–∑ –º–µ–Ω—é.")
# –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
async def main():
    await dp.start_polling(bot)

if name == "main":
    asyncio.run(main())
